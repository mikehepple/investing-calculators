{"version":3,"sources":["components/annualized-return/ARInputs.tsx","components/annualized-return/ARCalculator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["p","useState","validated","setValidated","investment","setInvestment","theReturn","setTheReturn","days","setDays","Form","noValidate","onSubmit","event","form","currentTarget","preventDefault","stopPropagation","checkValidity","undefined","Row","Col","md","FloatingLabel","controlId","label","Control","type","placeholder","min","required","onChange","e","parseFloat","target","value","step","parseInt","className","Button","size","variant","data","setData","investmentReturn","repeatPerYear","Container","ARInputs","toFixed","App","Navbar","bg","Brand","href","ARCalculator","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b3b2313.chunk.js","sourcesContent":["import {Button, Col, Form, Row} from \"react-bootstrap\";\nimport FloatingLabel from 'react-bootstrap/FloatingLabel'\nimport {FormEvent, useState} from \"react\";\n\ninterface Properties {\n    onSubmit: (data: AnnualizedReturnData | undefined) => void\n}\n\nexport interface AnnualizedReturnData {\n    investment: number\n    theReturn: number\n    days: number\n}\n\nexport default (p: Properties) => {\n\n    const [validated, setValidated] = useState(false);\n    const [investment, setInvestment] = useState<number>(0);\n    const [theReturn, setTheReturn] = useState<number>(0);\n    const [days, setDays] = useState<number>(0);\n\n    const handleSubmit = (event: any) => {\n        const form = event.currentTarget;\n        event.preventDefault();\n        event.stopPropagation();\n\n        setValidated(true);\n\n        if (form.checkValidity() !== false) {\n            p.onSubmit({\n                investment: investment,\n                theReturn: theReturn,\n                days: days\n            })\n        } else {\n            p.onSubmit(undefined);\n        }\n    };\n\n    return <>\n        <Form noValidate validated={validated} onSubmit={handleSubmit}>\n            <Row>\n                <Col md>\n                    <FloatingLabel controlId={\"ar-investment\"} label={\"Investment ($)\"}>\n                        <Form.Control type={\"number\"} placeholder={\"100\"} min={0} required\n                                      onChange={(e) => {\n                                          setInvestment(parseFloat(e.target.value))\n                                      }}\n                        />\n                    </FloatingLabel>\n                </Col>\n                <Col md>\n                    <FloatingLabel controlId={\"ar-return\"} label={\"Return ($)\"}>\n                        <Form.Control type={\"number\"} placeholder={\"100\"} min={0} required\n                                      onChange={(e) => {\n                                          setTheReturn(parseFloat(e.target.value))\n                                      }}\n\n                        />\n                    </FloatingLabel>\n                </Col>\n                <Col md>\n                    <FloatingLabel controlId={\"ar-days\"} label={\"Days\"}>\n                        <Form.Control type={\"number\"} placeholder={\"100\"} min={1} step={1} required\n                                      onChange={(e) => {\n                                          setDays(parseInt(e.target.value))\n                                      }}\n                        />\n                    </FloatingLabel>\n                </Col>\n                <Col md className=\"d-grid gap-2\">\n                    <Button size={\"lg\"} variant=\"outline-primary\" type={\"submit\"}>Calculate</Button>\n                </Col>\n            </Row>\n        </Form>\n    </>\n}","import ARInputs, {AnnualizedReturnData} from './ARInputs'\nimport {useState} from \"react\";\nimport {Col, Container, Row} from \"react-bootstrap\";\n\nexport default () => {\n\n    const [data, setData] = useState<AnnualizedReturnData | undefined>(undefined)\n\n    const investmentReturn = () => {\n        if (!data) { return 0; }\n        return (data.theReturn / data.investment) * 100;\n    }\n\n    const repeatPerYear = () => {\n        if (!data) { return 0; }\n\n        if (data.days <= 5) {\n            return 365 / data.days;\n        }\n\n        return 260 / (data.days * (5/7));\n\n    }\n\n    const annualizedReturn = () => {\n        if (!data) { return 0; }\n        return (investmentReturn() * repeatPerYear())\n    }\n\n    return <>\n\n        <Container >\n        <Row >\n            <Col>\n                <ARInputs onSubmit={setData}/>\n            </Col>\n        </Row>\n            <Row>\n                <Col>\n                    {data ? <>\n                        <table className={\"table mt-4\"}>\n                            <thead>\n                            <tr>\n                                <th>\n                                    Return\n                                </th>\n                                <th>\n                                    Annual Repeatability\n                                </th>\n                                <th>\n                                    Annualized Return\n                                </th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        {+investmentReturn().toFixed(2)}%\n                                    </td>\n                                    <td>\n                                        {+repeatPerYear().toFixed(2)} times per year\n                                    </td>\n                                    <td>\n                                        {+annualizedReturn().toFixed(2)}%\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </> : null}\n                </Col>\n            </Row>\n        </Container>\n\n\n    </>\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Inputs from \"./components/annualized-return/ARInputs\";\nimport {Container, Navbar} from \"react-bootstrap\";\nimport ARCalculator from \"./components/annualized-return/ARCalculator\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n\n            <Navbar bg=\"dark\" variant=\"dark\">\n                <Container>\n                    <Navbar.Brand href=\"#home\">\n                        Investing Calculators by fizzbuzz\n                    </Navbar.Brand>\n                </Container>\n            </Navbar>\n\n            <Container className={\"bg-light p-3 mt-4\"}>\n\n                <h1 className={\"mb-3\"}>Annualized Return Calculator</h1>\n\n                <ARCalculator/>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}